import streamlit as st

# --- INITIAL SETUP ---
if 'phase' not in st.session_state:
    st.session_state.phase = 'setup'
    st.session_state.players = []
    st.session_state.scores = {}
    st.session_state.current_owner_idx = 0
    st.session_state.current_turn_idx = 0
    st.session_state.active_players = []
    st.session_state.eliminated = []
    st.session_state.total_rounds = 1
    st.session_state.rounds_left = 0
    st.session_state.answer = ""
    st.session_state.question_history = []
    st.session_state.total_questions = 0
    st.session_state.max_questions = 5
    st.session_state.asking_queue = []
    st.session_state.ask_count = {}
    st.session_state.last_question = None

st.title("üß† ‡πÄ‡∏Å‡∏° '‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà' - Advanced Edition")

# --- SETUP PHASE ---
if st.session_state.phase == 'setup':
    st.header("üéÆ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö")
    num_players = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (2-10 ‡∏Ñ‡∏ô)", 2, 10, 5)
    total_rounds = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (1 ‡∏£‡∏≠‡∏ö = 1 ‡∏Ñ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö)", min_value=1, value=1)

    names = []
    for i in range(num_players):
        name = st.text_input(f"‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i+1}", key=f"player_{i}")
        if name:
            names.append(name)

    if st.button("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°") and len(names) == num_players:
        st.session_state.players = names
        st.session_state.active_players = names.copy()
        st.session_state.scores = {name: 0 for name in names}
        st.session_state.total_rounds = total_rounds
        st.session_state.rounds_left = total_rounds * len(names)
        st.session_state.phase = 'set_answer'
        st.rerun()

# --- SETTING SECRET ANSWER ---
elif st.session_state.phase == 'set_answer':
    owner = st.session_state.players[st.session_state.current_owner_idx]
    st.subheader(f"üëë {owner} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡∏±‡∏ö")
    st.session_state.answer = st.text_input("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ)", type="password")

    if st.button("üîí ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö") and st.session_state.answer:
        st.session_state.phase = 'playing'
        st.session_state.asking_queue = [i for i in range(len(st.session_state.players)) if i != st.session_state.current_owner_idx]
        st.session_state.current_turn_idx = st.session_state.asking_queue[0]
        st.session_state.eliminated = []
        st.session_state.question_history = []
        st.session_state.total_questions = 0
        st.session_state.ask_count = {name: 0 for name in st.session_state.players}
        st.session_state.last_question = None
        st.rerun()

# --- GAMEPLAY ---
elif st.session_state.phase == 'playing':
    st.subheader(f"üß© ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ({st.session_state.total_questions}/{st.session_state.max_questions})")
    for q in st.session_state.question_history:
        with st.container():
            st.markdown(f"""<div style='background-color:#ffe8cc;padding:15px;border-radius:12px;font-size:18px'>
            <b>‚ùì {q}</b>
            </div>""", unsafe_allow_html=True)

    current_player = st.session_state.players[st.session_state.current_turn_idx]
    owner = st.session_state.players[st.session_state.current_owner_idx]

    if current_player in st.session_state.eliminated:
        next_idx = (st.session_state.asking_queue.index(st.session_state.current_turn_idx) + 1) % len(st.session_state.asking_queue)
        st.session_state.current_turn_idx = st.session_state.asking_queue[next_idx]
        st.rerun()

    st.markdown(f"### üïπÔ∏è ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á: **{current_player}**")
    action = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥:", ["‡∏ñ‡∏≤‡∏°", "‡∏ï‡∏≠‡∏ö"], key=f"action_{st.session_state.current_turn_idx}")

    if action == "‡∏ñ‡∏≤‡∏°" and st.session_state.ask_count[current_player] < 5:
        with st.form(f"ask_form_{st.session_state.current_turn_idx}"):
            col1, col2 = st.columns([3, 1])
            with col1:
                question = st.text_input("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", key=f"question_input_{current_player}")
            with col2:
                st.markdown("<br><b>   ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</b>", unsafe_allow_html=True)
            submit_q = st.form_submit_button("‡∏ñ‡∏≤‡∏°")

        if submit_q and question.strip():
            st.session_state.last_question = question.strip()
            st.session_state.phase = 'owner_answer'
            st.rerun()

    elif action == "‡∏ï‡∏≠‡∏ö":
        with st.form(f"answer_form_{st.session_state.current_turn_idx}"):
            guess = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            submit_a = st.form_submit_button("‡∏ï‡∏≠‡∏ö")

        if submit_a and guess.strip():
            if guess.strip().lower() == st.session_state.answer.strip().lower():
                st.success(f"üéâ {current_player} ‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                st.session_state.scores[current_player] += 1
                st.session_state.phase = 'result'
            else:
                st.warning("‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                st.session_state.eliminated.append(current_player)
                idx = st.session_state.asking_queue.index(st.session_state.current_turn_idx)
                st.session_state.current_turn_idx = st.session_state.asking_queue[(idx + 1) % len(st.session_state.asking_queue)]
            st.rerun()

# --- OWNER ANSWERS THE QUESTION ---
elif st.session_state.phase == 'owner_answer':
    owner = st.session_state.players[st.session_state.current_owner_idx]
    st.subheader("üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    question_display = st.session_state.last_question + " ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
    st.markdown(f"""<div style='background-color:#fff3cd;padding:20px;border-radius:12px;font-size:20px'>
    <b>‚ùì {question_display}</b>
    </div>""", unsafe_allow_html=True)

    choice = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:", ["‡πÉ‡∏ä‡πà", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"], key=f"owner_ans_{st.session_state.total_questions}")
    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
        full_q = f"{question_display} ‚Üí {choice}"
        st.session_state.question_history.append(full_q)
        current_player = st.session_state.players[st.session_state.current_turn_idx]
        st.session_state.total_questions += 1
        st.session_state.ask_count[current_player] += 1
        idx = st.session_state.asking_queue.index(st.session_state.current_turn_idx)
        st.session_state.current_turn_idx = st.session_state.asking_queue[(idx + 1) % len(st.session_state.asking_queue)]

        if all(count >= 5 for name, count in st.session_state.ask_count.items() if name != owner):
            st.session_state.phase = 'result'
        else:
            st.session_state.phase = 'playing'
        st.rerun()

# --- RESULT ---
elif st.session_state.phase == 'result':
    st.subheader("üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°:")
    for name, score in st.session_state.scores.items():
        st.markdown(f"- **{name}**: {score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

    if st.session_state.rounds_left > 1:
        st.session_state.rounds_left -= 1
        st.session_state.current_owner_idx = (st.session_state.current_owner_idx + 1) % len(st.session_state.players)
        if st.button("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
            st.session_state.phase = 'set_answer'
            st.rerun()
    else:
        st.success("üéâ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
        if st.button("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
